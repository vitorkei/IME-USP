Capítulo 1 - Introdução

"define-type" cria um novo tipo enquanto "type-case" verifica qual o tipo e toma a devida ação.

===========================

Capítulo 2 - Primeira linguagem

  Criaremos uma lingaugem simples que executa operações aritméticas e o condicional if

define-type ArithC
  Definição de uma primeira linguagem (ArithC), que executa apenas soma e multiplicação.
  
parse
  Recebe uma s-expression e retorna um ArithS.
  Para isso, é necessário uma função que recebe uma entrada (s-expression) para ser processada e retornada em um determinado formato que nossa linguagem ainda precisa interpretar.

interp
  Recebe um ArithC e retorna um number.
  A saída do parse é então interpretada pelo interp e enviada para o compilador do plai-typed em um formato que ele consegue ler.
  
define-type ArithS
  Como as operações de subtração e menos unário não passam de aplicações de soma e de multiplicação, cria-se um novo tipo (ArithS) com açucar sintático. Essas operações são devidamente tratadas no parse, interp e desugar.
  
desugar
  Recebe um ArithS e retorna um ArithC.
  Como o ArithS é um ArithC com açúcar sintático, precisamos de uma função que remova esse açucar. A função desugar recebe como entrada ArithS e retornar como ArithC.
  
Condicional (if)
  Como o if não é nem uma operação de adição nem de multiplicação, ele precisa ser colocado diretament no ArithC e, portanto, no ArithS também. Por causa disso, ele precisa ser devidamente tratado no parse, interp e desugar.
  
===========================

Capítulo 3 - Segunda linguagem

  Aprimoraremos a linguagem possibilitando que sejam criadas funções para serem chamadas de tal forma que se torna desnecessário reescrevê-la todas as veze que quiser a utilizar. Entretanto, essas funções PRECISAM de uma biblioteca para serem armazenadas.

define-type FunDefC
  Por hora, não há funções para serem chamadas - apenas blocos de código que precisam ser digitados todas as vezes que quisermos o usar. O tipo FunDefC possui um nome (symbol), argumento (symbol) e um corpo (ExprC, que será definido mais adiante). Por enquanto, possui apenas um argumento.

define-type ExprC
  Em comparação com ArithC, ExprC precisa de duas novas entradas: identificadores (idC) e aplicação de função (appC). Enquanto o idC serve para encontrar os símbolos que serão substituidos pelos devidos argumentos, o appC serve para efetivamente chamar a função, uma vez que seus argumentos são o nome da função e seu argumento.

ExprS & desugar
  desugar recebe um ExprS e retorna um ExprC.
  ExprS é um tipo definido por define-type.
  Se quiser manter o açúcar sintático como no capítulo 1, é necessário fazer as respectivas alterações em ArithS e desugar para se tornarem ExprS e desugar (do ExprS), ou seja, adicionar idS e appS.

subst
  Recebe ExprC, symbol e ExprC e retorna ExprC.
  Função que recebe três argumento a, b e c.
  c é uma ExprC com um symbol b que será substituído por uma outra ExprC a.
  O objetivo da função é substituir o argumento passado, que chega como um símbolo, para o devido formato ExprC.

interp
  Recebe ExprC e listof FunDefC e retorna number.
  Age da mesma forma que o interp do ArithC, mas adaptado para utilizar ExprC e FunDefC.

get-fundef
  Recebe um symbol e um listof FunDefC e retorna FunDefC
  Busca a função dentre as funções existentes na listof FunDefC que foi passada como argumento.

parse
  Recebe uma s-expression e retorna uma ExprS.
  Funciona da mesma forma que o parse do ArithC, mas com um caso a mais: se first sl for igual a call. Ou seja, ele verifica se é uma chamada de função e toma a ação necessária.

define biblioteca
  Lista de fdC (listof fdC).
  É uma lista de funções definidas para poderem ser chamadas pelo nome ao invés de terem que ser digitadas todas as vezes que quiser que sejam usadas. É uma dessas que é chamada como segundo argumento do interp.

===========================

Capítulo 4 - Ambientes (Environments)

  Para evitar que as funções sejam percorridas sempre duas vezes, cria-se os environments, que armazenam o valor (number por hora) de cada symbol em uma lista

define-type Binding
  Ao utilizar a função subst, as funções são percorridas duas vezes: uma para trocar os argumentos e outra para interpretar a função (e executá-la). O tipo Binding associa um symbol a um number de tal forma que a troca seja feita apenas em tempo de execução.

define-type-alias Env (listof Binding) & define mt-env empty & define extend-env cons
  Uma lista de Bindings forma o environment. mt-env é um environment vazio e extend-env é uma função que estende o environment. Graças ao environment, não é mais necessário utilizar a função subst.

interp
  Recebe uma ExprC, um Env e um listof FunDefC e retorna um number
  interp recebeu mais um argumento: o environment. Todas as chamadas recursivas agora precisam receber env como argumento também. A associação do Binding é feita nesta parte.

lookup
  Recebe um symbol e um Env e retorna um number
  Procura o symbol passado no Env e retorna seu respectivo valor caso exista no Env.

===========================

Capítulo 5 - Funções como valores

  Por hora, as expressões retornam apenas números. Neste capítulo, isso será aprimorado.

define-type ExprC
  Passa a ter o tipo fdC também como uma estrutura do tipo.
  appC-fun passa a ser ExprC ao invés de symbol.

define-type Value
  Novo tipo de retorno para o interp, já que agora as funções retornam valores ao invés de apenas números.

num+ & num*
  Recebem Value, Value (os dois elementos da soma ou da multiplição) e retornam Value (resultado)
  Como agora a linguagem trabalha com Value e não apenas number, as operações aritméticas precisam ser devidamente adaptadas.

interp
  O interp agora precisa verificar a estrutura fdC também.
  appC não precisa mais buscar f com get-fundef. Ao invés disso, ele é interpretado chamando (interp f env).

desugar
  Adiciona-se o fdS
  Altera o appS para que desugar seja executado no fun também.

parse
  cond passa a verificar mais um caso: se a s-expression recebida é um symbol. Em caso positivo, retorna idS convertendo a s-expression para um symbol.
  O caso de a s-expression ser uma lista passa a ter mais um caso verificado: se o primeiro symbol da lista é "func" e executa a ação correspondente (fdS).

interpS
  Apenas como um apoio, ele é apenas um interp com o mt-env já incluido, removendo a necessidade de incluí-lo em toda chamada de função.

===========================

Capítulo 6 - Closures (Fechamentos)

  Associações precisam ser propagadas para funções internas (funções dentro de funções por exemplo). Entretanto, os environments são criados a partir do zero a cada aplicação de função.

define-type ExprC
  fdC -> lamC
    (name : symbol) -> removido, pois nomes não são mais necessários.

define-type Value
  funV -> closV
    (name : symbol) -> removido
    (env : Env) adicionado
  O valor de retorno não é mais uma função ou um número, mas um closure ou número.

desugar
  fdS -> lamS
    (n a b) -> (a b)
    Correspondente mudança na ação tomada.
  Precisa fazer as alterações correspondentes.

parse
  fdS -> lamS
    Correspondentes mudanças na ação tomada.
  Prcisa fazer as alterações correspondentes.

interp
  fdC -> lamC
    (n a b) -> (a b)
    (funV n a b) -> (closV a b env)
  appC passa a usar o environment do closure chamado (closV-env) ao invés de um environment vazio (mt-env)

Nomeando funções
  É possível dar nome para as funções, bastando colocá-las no environment. Também é possível usar o desugar para dar nomes "menos feios".

===========================

Capítulo 7 - Mutação

  A ideia de mutação é fazer a saída de um trecho de código mudar se o valor da variável de entrada for alterada. Isso é feito por meio de box, que possui as operações de armazenamento, recuperação e alteração. 
  O environment guarda a associação de um symbol a um number (Location). Esse number, por sua vez, é a posição de memória do symbol. Nessa posição de memória, existe um Value. A associação da posição de memória a esse Value é feito pelo Storage (que, quando é um (listof Storage), se torna um Store).
  O pacote (box) carrega em si um número: Location. Ele leva esse Location e o coloca no devido lugar no environment, lugar onde o nome está associado.

define-type ExprC
  Adicionados boxC, unboxC, setboxC & seqC
  Definição, desempacotamento e empacotamento de pacotes, e lista de duas expressões que devem ser executadas sequencialmente.

define-type ExprS
  Alterada de acordo com ExprC

define-type Value
  Adicionada estrutura [boxV (v : Value)]

define-type-alias Location
  number
  Posição na memória de um symbol.

define-type Binding
  (val : number) -> (val : Location)

define-type Storage
  Similar ao Environment.
  Valor armazenado em uma determinada posição da memória

define-type-alias Store (listof Storage)
  lista de Storage

define mt-store empty
define override-store cons

interp
  Adicionados boxC e unboxC

define-type Result
  v*s é um construtor - o * não é nenhuma operação específica.

new-loc
  Retorna a próxima localização disponível

===========================

Capítulo 8 - Variáveis

  Ao utilizar variáveis, o valor do identificador, que é a caixa, muda diretamente.
  Enquanto o capítulo 7 cobre mutação utilizando boxes, o capítulo 8 faz isso com variáveis (diretamente).
  A utilidade de utilizar caixas ou variáveis é que, com isso, é possível alterar o valor de um nome sem precisar instanciar um nome completamente novo.

define-type ExprC
  Recebe o construtor setC e perde boxC, unboxC e setboxC.

define-type Value
  Perde o construtor boxV

===========================

Capítulo 9 - Estruturas recursivas

  Recursão pode ser feito referenciando objetos de mesmo tipo ou o mesmo objeto. O primeiro caso é simples (i.e.: árvores e listas). O segundo é mais complexo: é necessário utilizar mutação.
  O capítulo consiste na criação de uma função recursiva (fatorial no caso).

ExprS
  Adicionado letS

parser
  Adicionado def

===========================

Capítulo 10 - Orientação a objetos

  Objeto é um agrupamento de funções, acompanhado de meios para escolher uma delas. De forma mais simples, um objeto é um valor que mapeia nomes a outros valores ou métodos. A diferença está no conjunto de nomes em cada objeto.
  Se um objeto pode ser visto como uma coleção de valores com nomes, então é possíbel implementá-lo com um lambda e um case.
  
define-type Value
  Adicionado [objV (ns : (listof symbol)) (vs : (listof Value))]
  Um objeto passa a ser um valor possível.

ExprC
  Adicionado [objC (ns : (listof symbol)) (es : (listof ExprC))]
  Adicionado [msgC (o : ExprC) (n : symbol)]
  Objetos também passam a fazer parte da linguagem (objC), bem como o valor associado a um nome, tipo o.n (msgC).

interp
  Adicionado [objC (ns es) (objV  ns (map (lambda (e) (interp e env)) es))]
  Adicionado [msgC (o n) (lookup=msg n (interp o env))]
  Interpretar um objeto significa interpretar seus valores (objC).
  A interpretação do msgC consiste em buscar o valor - precisa da função lookup-msg.

define lookup-msg
  Recebe um symbol, um Value e retorna um Value
  Semelhante ao lookup

apply
  Elemento de racket, transforma a lista passada como argumento em uma lista de argumentos

Construtor
  Função chamada na criação do objeto.

Estado
  Basta usar variáveis ou boxes.

Herança
  Para um objeto ser estendido, ele precisa saber quem é seu pai. Uma solução para isso é o objeto construir seu próprio pai, usando os parâmetros que recebeu. Tudo que é necessário é o construtor do objeto receber o construtor do pai como parâmetro adicional. Dessa forma, os construtores dos pais, avós e etc. são chamados em cadeia. Dessa forma, cada objeto ganha uma cópia particular de tudo que está acima na hierarquia.

  Quase classe - blob
    Essa construção de objeto cria e chama os métodos dos pais, que se comportam como classes, mas não são classes completas pois são apenas estendidas. Essa definição parcial é chamada de blob: uma função parametrizada pelos pais.

  Protótipos
    Outra alternativa é o construtor do objeto receber uma referência para o pai já pronto ao invés de chamar o construtor do pai - utilizar protótipos ao invés de classes. Com protótipos, é possível construir o comportamento da classe, mas não o contrário: não é possível construir protótipos utilizando o comportamente da classe.

  Herança múltipla
    Um objeto pode herdar membros de vários outros, não apenas de um só (herança múltipla). Como a busca deve ser feita é um problema.
    Subindo na hierarquia: os métodos da classe tem prioridade sobre os métodos da classe mãe quando são chamados (super)
    Descendo na hierarquia: os métodos da classe mão tem prioridade sobre os métodos da classe, sendo estes chamados apenas quando necessário (inner)
  
  mixin
    Completa classe ao invés de estendê-la.
  
  trait
    Resolve o problema de mixins acumulados que podem entrar em conflito caso tenham métodos e assinaturas iguais, pois incluem restrições sobre mixins.
    Métodos de um trait tem precedência sobre os métodos da classe mãe, mas são substituídos pelos da classe.
    Não dependa da ordem de inclusão.

===========================

Capítulo 11 - Gerenciamento de memória

Coleta de lixo
  
