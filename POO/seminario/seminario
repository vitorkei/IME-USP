http://whatis.techtarget.com/definition/aspect-oriented-programming-AOP
-Programação orientada a aspectos (POA) é uma forma de programar que permite que
 propriedades globais do programa determinem como ele será compilado em um
 executável. Pode ser usado com programação orientada a objetos (POO)

-Aspecto é um subprograma associado a uma propriedade específica do programa.
 Conforme a propriedade varia, seu efeito se espalha pelo programa inteiro.
 O subprograma aspecto é usado como parte de um novo tipo de compilador
 chamado aspect weaver.

-Uma analogia para POA é a manufatura de panos em que as linhas se transam
 automaticamente. Sem POA, o programador teria que costurá-las manualmente.

https://en.wikipedia.org/wiki/Aspect-oriented_programming
-Paradigma de programação que tem como objetivo aumentar a modularização
 ao permitir a separação de "cross-cutting concerns" (interesses/características transversais).
-Características transversais são aspectos de um prograam que afetam outras
 características que, muitas vezes, não podem ser descompostas de forma clara
 do resto do sistema tanto do ponto de vista de design quanto de implementação,
 podendo resultar em duplicação de código e/ou dependências significativas
 entre os sistemas.
-Aspectos são característica de um programa que se ligam à várias outras
 partes, mas que não está relacionado à função primária do programa.
 Uma vez que um aspecto interpõe ("crosscuts") o interesse/característica
 principal do programa, ele viola o interesse de separação que tenta encapsular
 funções não relacionadas.
-Interesse de separação é um princípio de design de programação que busca separar
 o programa em setores distintos de tal forma que cada um lida com interesses separados.
-Interesse é um conjunto específico de informações que tem efeito no código de um programa.
 Ele pode ser tão genérico quanto genérico quanto os detalhes das interações de uma base de
 ou tão específico quanto calculos primitivos (adição, subtração, ...).
 Normalmente, um código consegue ser separado em seções lógicas, cada uma lidando
 com interesses diferentes, 


Necessário:
1-Definir o que é um "aspecto"
2-Definir o que é um "interesse" (concern)
3-Definir separação de interesses (separation of concerns)
4-Definir o que são interesses/características transversais (cross-cutting concerns)
5-Definir modularidade (modularity)
6-Definir paradigma de programação (programming paradigm)
7-Definir programação orientada a aspectos (POA)
8-Definir "aspect weaver"

1- O que é um aspecto?
    Aspecto é um subprograma associado a uma propriedade específica do programa.
    Conforme essa propriedade varia, o efeito se propaga pelo programa inteiro.
    Ele é usado como parte de um novo tipo de compilador chamado de "aspect weaver". [1]
    
    O aspecto de um programa é uma característica ligada a várias partes do programa,
    mas que não está relacionada a funcionalidade primária dele. [2.1]
    
    Aspecto é uma característica comum que está normalmente espalhado em vários métodos, classes,
    hierarquias de objetos ou até mesmo modelos inteiros de objetos. Seu comportament faz parecer
    que precisaria de uma estrutura para si mesmo, mas é muito difícil ou até mesmo impossível de
    espressas essa estrutura em código tradicional de programação orientada à objetos. [3]
    
    Um aspecto é uma proriedade que não pode ser encapsulada organizadamente em um procedimento
    generalizado. [5, pag. 8]

4- Quando duas propriedades do programa precisam ser construídas de forma diferente,
   mas agir coordenadamente, dizemos que elas fazem "cross-cut" uma na outra. [5, pag. 8]



Links encontrados ao buscar "aspect oriented programming" no google:

[1] http://whatis.techtarget.com/definition/aspect-oriented-programming-AOP

[2] https://en.wikipedia.org/wiki/Aspect-oriented_programming
    [2.1] https://en.wikipedia.org/wiki/Aspect_(computer_programming)

[3] https://docs.jboss.org/aop/1.0/aspect-framework/userguide/en/html/what.html

[4] https://stackoverflow.com/questions/242177/what-is-aspect-oriented-programming

[5] https://lists.gnu.org/archive/html/gnumed-devel/2005-12/pdfDUNizNkWN6.pdf
