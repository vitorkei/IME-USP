Lista P2

01- (+ 42 (* 1.618034 1729))
    (
      (lambda (a) (a ((lambda (resto) (resto 1.618034))
                      (lambda (x) (* x 1729))
                     )
                  )
      )
      (lambda (y) (+ y 42))
    )
    
    Alternativamente:
    (
      (lambda (a resto) (resto (* a 1.618034)))
      1729
      (lambda (x) (+ x 42))
    )

02- Considerando que uma pilha de execução é um encadeamento de frames
     e cada continuação encabeça um encadeamento, então é possível dizer que
     salvar uma continuação em uma variável e devolver outra continuação
     corresponde a uma troca de pilhas de execução.

03- Macro higiênico é um macro que diferencia environments de
    tal forma que definições recursivas de macros ou com autorreferências
    sejam possíveis.

04-

05-

06- call/cc recebe como argumento um procedimento que recebe um argumento,
    que é passado para a continuação, iniciando ou continuando com a chamada
    em cascata na pilha. let/cc chama call/cc passando um lambda com argumento
    k e corpo b como argumento de call/cc. Logo, não seria possível fazer o
    contrário.

07- (+ 3 (call/cc (lambda (x) (* 13 (x 3)))))
    (+ 3 ...) é a continuação de (lambda (x) (* 13 (x 3))). Ou seja, x é um
    procedimento que soma 3. Como call/cc chama apenas a continuação e x
    recebeu 3, então a saída é (+ 3 3), cujo resultado é 6.
    Equivale a (+ 3 (let/cc x (* 13 (x 3))))
    ---
    (begin (define blue #f) (+ 1 (call/cc (lambda (red) (set! blue red) 1))) (blue 40))
    Inicialmente, o valor de blue é definido como #f (false).
    Na linha seguinte, é chamada a continuação de (lambda (red) (set! blue red) 1),
    que é + 1. O valor de blue é definido como o de red, que é (+ 1 ...)
    Em seguida, é passado o número 40 para blue, fazendo a soma (+ 1 40), cujo
    resultado é 41. O 1 na linha de chamada de continuação é porque é exigido que
    seja retornado um número, mas ele não é usado.
    Equivale a
    (begin (define blue #f) (+ 1 (let/cc red (set! blue red) 1)) (blue 40))

08- 

09- 

10- Verdadeiro - Um bom verificador de erros garante que não ocorrerão erros de
                 execução, pois faz uma análise sintática do código, verificando
                 se não há variáveis recebendo valores que não correspondem ao
                 seu tipo ou funções recebendo argumentos de tipo incorreto.

11- 
